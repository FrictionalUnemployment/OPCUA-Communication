# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'zuo.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from zeroconf import ServiceBrowser, Zeroconf
import server_discovery as dsc
import Ui_client as ui_c
import navigating_nodes as nav
#from Ui_client import *
import sys


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.clients = list()
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(912, 490)
        MainWindow.setStyleSheet("background-color: rgb(38, 38, 38);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Connect = QtWidgets.QPushButton(self.centralwidget)
        self.Connect.setGeometry(QtCore.QRect(780, 0, 51, 21))
        self.Connect.setStyleSheet("color: rgb(200, 200, 200);")
        self.Connect.setObjectName("Connect")
        self.Discover = QtWidgets.QPushButton(self.centralwidget)
        self.Discover.setGeometry(QtCore.QRect(690, 0, 81, 21))
        self.Discover.setStyleSheet("color: rgb(200, 200, 200);")
        self.Discover.clicked.connect(self.discover_servers)
        self.Discover.setObjectName("Discover")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(0, 0, 681, 21))
        self.lineEdit.setStyleSheet("color: rgb(200, 200, 200);")
        self.lineEdit.setObjectName("lineEdit")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(340, 20, 571, 331))
        self.groupBox.setFlat(False)
        self.groupBox.setCheckable(False)
        self.groupBox.setObjectName("groupBox")
        self.groupBox.setStyleSheet("color: rgb(200,200,200);")
        self.horizontalScrollBar = QtWidgets.QScrollBar(self.groupBox)
        self.horizontalScrollBar.setGeometry(QtCore.QRect(0, 310, 571, 16))
        self.horizontalScrollBar.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalScrollBar.setObjectName("horizontalScrollBar")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(0, 360, 911, 111))
        self.textBrowser.setObjectName("textBrowser")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(840, 0, 61, 21))
        self.pushButton.setStyleSheet("color: rgb(200, 200, 200);")
        self.pushButton.setObjectName("pushButton")
        self.treeView = QtWidgets.QTreeView(self.centralwidget)
        self.treeView.setGeometry(QtCore.QRect(10, 30, 331, 321))
        self.treeView.setHeaderHidden(True)
        self.treeView.setStyleSheet("color: rgb(200, 200, 200);")
        self.verticalScrollBar = QtWidgets.QScrollBar(self.centralwidget)
        self.verticalScrollBar.setGeometry(QtCore.QRect(320, 30, 16, 321))
        self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar.setObjectName("verticalScrollBar")
        self.Connect.raise_()
        self.Discover.raise_()
        self.lineEdit.raise_()
        self.textBrowser.raise_()
        self.pushButton.raise_()
        self.treeView.raise_()
        self.groupBox.raise_()
        self.verticalScrollBar.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 912, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        ############################### Discovery ################################

        treeModel = Qt.QStandardItemModel()
        self.treeView.setHeaderHidden(True)
        self.rootNode = treeModel.invisibleRootItem()
        self.SERVER_ARR = []
        self.STANDARDITEM_ARR = []
        self.treeView.setModel(treeModel)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CustomOPC"))
        self.Connect.setText(_translate("MainWindow", "Connect"))
        self.Discover.setText(_translate("MainWindow", "Discover"))
        self.groupBox.setTitle(_translate("MainWindow", "Attribute Panel"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"><br /></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Disconnect"))

    def create_model(self):
        temp_node_arr = list()
        name_dict = {}
        for i in self.clients:
            
            temp_node_arr.append(nav.Navigating_nodes(i.client))
            i.client.connect()
        
        for i in temp_node_arr:
            name_dict.update(i.get_name_from_nodes(
                i.get_children_nodes(
                    i.get_root_nodes())))
    
        
        
        z = 0
        for key in name_dict.keys():
            temp = Qt.QStandardItem(key)

            l = name_dict[key]
            for i in l:
                temp.appendRow(Qt.QStandardItem(i))
            self.STANDARDITEM_ARR[z].appendRow(temp)
            z += 1


               # for value in name_dict.values():
                #    i.appendRow(Qt.QStandardItem(value))

        
        #    Server1                                      Server2
        #["Parameters": ["temp", "ekrker", "efwer"], "Parameters2": ["qwkrk", "fkqk"]]



    def discover_servers(self):
        url = dsc.Server_Discovery()
        url.get_servers()
        self.SERVER_ARR = url.get_all(0)
        servers = url.get_all_as_address()
        for i in servers:
            self.clients.append(ui_c.Ui_client(i))

        for i in self.SERVER_ARR:
            self.STANDARDITEM_ARR.append(Qt.QStandardItem(i))
            
        for j in range(len(self.SERVER_ARR)):
            self.STANDARDITEM_ARR[j].setEditable(False)
            self.rootNode.appendRow(self.STANDARDITEM_ARR[j])
        

        
        self.create_model()

        

    

            
        
        

if __name__ == "__main__":
   
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    
    sys.exit(app.exec_())
